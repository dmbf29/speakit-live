
    <script>window.MediaRecorder&&!/^\?polyfill/.test(location.search)||document.write(decodeURI('%3Cscript src="./polyfill.js">%3C/script>'));</script>
    <style>
    *{padding:0;margin:0}
    a{color:#009387}a:visited{color:#930087}
    body{margin:1rem;font-family:sans-serif}
    main{max-width:28rem;margin:0 auto;position:relative}
    #controls{display:flex;margin-top:2rem}

    button{flex-grow:1;height:2.5rem;min-width:2rem;border:none;border-radius:.15rem;background:pink;margin-left:2px;box-shadow:inset 0 -.15rem 0 rgba(0,0,0,.2);cursor:pointer;display:flex;justify-content:center;align-items:center}
    button:focus,
    button:hover{outline:none;background:#00ffe9}
    button::-moz-focus-inner{border:0}
    button:active{box-shadow:inset 0 1px 0 rgba(0,0,0,.2);line-height:3rem}
    button:disabled{pointer-events:none;background:#d3d3d3}
    button:first-child{margin-left:0}
    button svg{transform:translateY(-.05rem);fill:#000;width:1.4rem}
    button:active svg{transform:translateY(0)}
    button:disabled svg{fill:#9a9a9a}
    button text{fill:#00e5d2}
    button:focus text,
    button:hover text{fill:#00ffe9}
    button:disabled text{fill:#d3d3d3}
    #formats,
    #mode{margin-top:.5rem;font-size:80%}
    #mode{float:right}
    #support{display:none;margin-top:2rem;color:red;font-weight:700}
    #list{margin-top:1.6rem}
    audio{display:block;width:100%;margin-top:.2rem}
    li{list-style:none;margin-bottom:1rem}
    </style>


    <main>
      <h1>SpeakIt Live</h1>

      <div id="controls">
        <button id="record" disabled="" autocomplete="off" title="Record">
          <svg viewBox="0 0 100 100">
            <circle cx="50" cy="50" r="46"></circle>
          </svg>
        </button>

        <button id="stop" autocomplete="off" disabled="" title="Stop">
          <svg viewBox="0 0 100 100">
            <path d="M12 12h76v76H12z"></path>
          </svg>
        </button>

      </div>

      <div id="mode"><a href="?polyfill">Delete the records</a></div>

      <div id="formats"></div>

      <div id="support">Your browser doesnâ€™t support MediaRecorder or WebRTC to be able to polyfill MediaRecorder.
      </div>

      <ul id="list"></ul>
    </main>

    <script>
var EVENTS = ['start', 'stop'];
var TYPES = ['audio/webm', 'audio/ogg', 'audio/wav'];

var recorder, list, recordFull, stop;

const KB = 1 << 10;
const MB = 1 << 20;

function bytes (value) {
  var mag = Math.abs(value)

  let unit
  if (mag >= MB) {
    unit = 'MB'
    value = value / MB
  } else if (mag >= KB) {
    unit = 'KB'
    value = value / KB
  } else {
    unit = 'B'
  }

  return value.toFixed(0).replace(/(?:\.0*|(\.[^0]+)0+)$/, '$1') + ' ' + unit
}

function startRecording (type) {
  list.innerHTML = ''
  navigator.mediaDevices.getUserMedia({ audio: true }).then(function (stream) {
    recorder = new MediaRecorder(stream)

    EVENTS.forEach(function (name) {
      recorder.addEventListener(name, changeState.bind(null, name))
    })
    recorder.addEventListener('dataavailable', saveRecord)

    if (type === 'full') {
      recorder.start()
    } else {
      recorder.start(1000)
    }
  })
  recordFull.blur()
}

function stopRecording () {
  recorder.stop()
  recorder.stream.getTracks()[0].stop()
  stop.blur()
}


function requestData () {
  recorder.requestData()
  request.blur()
}

function saveRecord (e) {
  var li = document.createElement('li')

  var strong = document.createElement('strong')
  strong.innerText = 'dataavailable: '
  li.appendChild(strong)

  var s = document.createElement('span')
  s.innerText = e.data.type + ', ' + bytes(e.data.size)
  li.appendChild(s)

  var audio = document.createElement('audio')
  audio.controls = true
  audio.src = URL.createObjectURL(e.data)
  li.appendChild(audio)

  list.appendChild(li)
}

function changeState (eventName) {
  var li = document.createElement('li')
  li.innerHTML = '<strong>' + eventName + ': </strong>' + recorder.state
  if (eventName === 'start') {
    li.innerHTML += ', ' + recorder.mimeType
  }
  list.appendChild(li)

  if (recorder.state === 'recording') {
    recordFull.disabled = true
    stop.disabled = false
  } else if (recorder.state === 'inactive') {
    recordFull.disabled = false
    stop.disabled = true
  }
}

list = document.getElementById('list')

recordFull = document.getElementById('record')
stop = document.getElementById('stop')

if (MediaRecorder.notSupported) {
  list.style.display = 'none'
  document.getElementById('controls').style.display = 'none'
  document.getElementById('formats').style.display = 'none'
  document.getElementById('mode').style.display = 'none'
  document.getElementById('support').style.display = 'block'
} else {
  document.getElementById('formats').innerText = 'Format: ' +
    TYPES.filter(function (i) {
      return MediaRecorder.isTypeSupported(i)
    }).join(', ')

  recordFull.addEventListener('click', startRecording.bind(null, 'full'))
  stop.addEventListener('click', stopRecording)
  recordFull.disabled = false
}

    </script>
